"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var extension_composer_1 = require("../../extension-composer");
var vso_manifest_builder_1 = require("./vso-manifest-builder");
var vsix_manifest_builder_1 = require("../../vsix-manifest-builder");
var Q = require("q");
var VSSExtensionComposer = (function (_super) {
    __extends(VSSExtensionComposer, _super);
    function VSSExtensionComposer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VSSExtensionComposer.prototype.getBuilders = function () {
        return _super.prototype.getBuilders.call(this).concat([new vso_manifest_builder_1.VsoManifestBuilder(this.settings.root)]);
    };
    VSSExtensionComposer.prototype.validate = function (components) {
        return _super.prototype.validate.call(this, components).then(function (result) {
            var data = components.builders.filter(function (b) { return b.getType() === vso_manifest_builder_1.VsoManifestBuilder.manifestType; })[0].getData();
            if (data.contributions.length === 0 && data.contributionTypes.length === 0) {
                result.push("Your extension must define at least one contribution or contribution type.");
            }
            data = components.builders.filter(function (b) { return b.getType() === vsix_manifest_builder_1.VsixManifestBuilder.manifestType; })[0].getData();
            var galleryFlags = data.PackageManifest.Metadata[0].GalleryFlags;
            var properties = data.PackageManifest.Metadata[0].Properties;
            if (galleryFlags && galleryFlags[0] && galleryFlags[0].toLowerCase().includes("paid")) {
                if (properties && properties.length > 0) {
                    var property = properties[0].Property.filter(function (prop) { return prop.$.Id === VSSExtensionComposer.SupportLink && prop.$.Value; });
                    if (!property) {
                        result.push("Paid extensions are required to have a support link. Try adding it to your manifest: { \"links\": { \"support\": \"<support url>\" } }");
                    }
                }
                else {
                    result.push("Paid extensions are required to have a support link. Try adding it to your manifest: { \"links\": { \"support\": \"<support url>\" } }");
                }
            }
            return Q.resolve(result);
        });
    };
    return VSSExtensionComposer;
}(extension_composer_1.ExtensionComposer));
VSSExtensionComposer.SupportLink = "Microsoft.VisualStudio.Services.Links.Support";
exports.VSSExtensionComposer = VSSExtensionComposer;
//# sourceMappingURL=composer.js.map